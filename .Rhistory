E
}
probability_selection(output)
probability_selection(output)
probability_selection <- function(output)
{
E = c()
for(i in 1:2)
{
string = output[i,]
shedule=DecodeSeq_Single(string)
a=shedule$Lateness
avg = sum(a)/length(string)
g = 100-avg
E = c(E,g)
}
del_E = E[1]-E[2]
del_E
o = exp(del_E/T)
prob = 1/(1+o)
prob
E
}
probability_selection(output)
probability_selection <- function(output)
{
E = c()
for(i in 1:2)
{
string = output[i,]
shedule=DecodeSeq_Single(string)
a=shedule$Lateness
avg = sum(a)/length(string)
g = 100-avg
E = c(E,g)
}
del_E = E[1]-E[2]
del_E
o = exp(del_E/T)
prob = 1/(1+o)
prob
}
T=2
probability_selection(output)
T=90
probability_selection(output)
rnorm(1,0.5,0.5)
?rnorm
pnorm(5)
pnorm(4)
0.5/3
rnorm(10,0.5,0.1666667)
rnorm(100,0.5,0.1666667)
SimulatedAnnealing <- function(data,T)
{
Jobs = length(data$Job)
suggest = CreateBiasedPopulation(Jobs,1)
data = data
g = T
for(gen in  1:g)
{
output = mutation(data,suggest)
prob = probability_selection(output)
r = rnorm(1,0.5,0.1666667)
if(r <- prob)
{suggest = output[2,]}
else
suggest = output[1,]
T = T-1
print(T)
}
}
SimulatedAnnealing(data,5)
## Creates a biased population set
CreateBiasedPopulation <- function(Jobs,Population)
{
##  matrix to filled by parents
parents = matrix(nrow=Population,ncol=Jobs,byrow=TRUE)
parent_chrom = c()
ProcessTime = data$ProcessTime
##   Finding the SPT Job
SPT = which.min(ProcessTime)
pre_sol = 1:Jobs
sol_job = Jobs - 1
sol = c()
for(l in 1:Jobs)
{
## The job  which don't correspond to SPT are ignored
if(l == SPT  )  {}
else sol = c(sol,pre_sol[l])
## The  job not being spt is stored
}
##  loop for number of parents required
for(k in 1:Population)
{
Jobs = nrow(data)
chrom = c()
## simulation by generating random   sequence of normal distribution
sim = rnorm(sol_job,1,1)
sort_sim = sort(sim)
## to create a list of jobs as sorted
for(j in 1:sol_job)
{
logic = sim == sort_sim[j]
for(i in 1:sol_job)
{
if( logic[i]==TRUE)
{chrom=c(chrom,sol[i])}
}
}
## Saves a individual parent with SPT as its first element
parent_chrom = c(parent_chrom,SPT,chrom)
}
## creates a matrix of parents
parents = matrix(parent_chrom,nrow=Population,ncol=Jobs,byrow=TRUE)
parents
}
SimulatedAnnealing(data,5)
## Simulated Annealing Function using GA package
SimulatedAnnealing <- function(data,T)
{
Jobs = length(data$Job)
suggest = CreateBiasedPopulation(Jobs,1)
data = data
g = T
for(gen in  1:g)
{
output = mutation(data,suggest)
prob = probability_selection(output)
r = rnorm(1,0.5,0.1666667)
if(r <- prob)
{suggest = output[2,]}
else
suggest = output[1,]
T = T-1
}
suggest
}
SimulatedAnnealing(data,5)
SimulatedAnnealing(data,20)
SimulatedAnnealing(data,100)
SimulatedAnnealing(data,80)
SimulatedAnnealing(data,50)
## Simulated Annealing Function using GA package
SimulatedAnnealing <- function(data,T)
{
Jobs = length(data$Job)
suggest = CreateBiasedPopulation(Jobs,1)
data = data
optimization_obj = c()
iterations = c()
g = T
for(gen in  1:g)
{
output = mutation(data,suggest)
prob = probability_selection(output)
r = rnorm(1,0.5,0.1666667)
if(r <- prob)
{suggest = output[2,]}
else
suggest = output[1,]
T = T-1
schedule = DecodeSeq_Single(suggest)
obj = mean(schedule$Lateness)
optimization_obj = c(optimization_obj,obj)
iterations = c(iterations,g)
}
plot(iterations,optimization_obj)
suggest
}
SimulatedAnnealing(data,50)
SimulatedAnnealing(data,20)
SimulatedAnnealing(data,15)
mutation(data,suggest)
output[2,]
output[1,]
output[5,]
## Simulated Annealing Function using GA package
SimulatedAnnealing <- function(data,T)
{
Jobs = length(data$Job)
suggest = CreateBiasedPopulation(Jobs,1)
data = data
optimization_obj = c()
iterations = c()
g = T
for(gen in  1:g)
{
output = mutation(data,suggest)
prob = probability_selection(output)
r = rnorm(1,0.5,0.1666667)
if(r <- prob)
{suggest = output[2,]}
else
{ suggest = output[1,]}
T = T-1
schedule = DecodeSeq_Single(suggest)
obj = mean(schedule$Lateness)
optimization_obj = c(optimization_obj,obj)
iterations = c(iterations,g)
}
plot(iterations,optimization_obj)
suggest
}
SimulatedAnnealing(data,15)
## Simulated Annealing Function using GA package
SimulatedAnnealing <- function(data,T)
{
Jobs = length(data$Job)
suggest = CreateBiasedPopulation(Jobs,1)
data = data
optimization_obj = c()
iterations = c()
g = T
for(gen in  1:g)
{
output = mutation(data,suggest)
prob = probability_selection(output)
r = rnorm(1,0.5,0.1666667)
if(r <- prob)
{suggest = output[2,]}
else
{ suggest = output[1,]}
T = T-1
schedule = DecodeSeq_Single(suggest)
obj = mean(schedule$Lateness)
optimization_obj = c(optimization_obj,obj)
iterations = c(iterations,gen)
}
plot(iterations,optimization_obj)
suggest
}
SimulatedAnnealing(data,15)
probability_selection <- function(output,T)
{
E = c()
for(i in 1:2)
{
string = output[i,]
shedule=DecodeSeq_Single(string)
a=shedule$Lateness
avg = sum(a)/length(string)
g = 100-avg
E = c(E,g)
}
del_E = E[1]-E[2]
del_E
o = exp(-del_E/T)
prob = 1/(1+o)
prob
}
SimulatedAnnealing(data,15)
probability_selection <- function(output,T)
{
E = c()
for(i in 1:2)
{
string = output[i,]
shedule=DecodeSeq_Single(string)
a=shedule$Lateness
avg = sum(a)/length(string)
g = 100-avg
E = c(E,g)
}
del_E = E[1]-E[2]
del_E
o = exp(-(del_E/T))
prob = 1/(1+o)
prob
}
SimulatedAnnealing(data,15)
## Simulated Annealing Function using GA package
SimulatedAnnealing <- function(data,T)
{
Jobs = length(data$Job)
suggest = CreateBiasedPopulation(Jobs,1)
data = data
optimization_obj = c()
iterations = c()
g = T
for(gen in  1:g)
{
output = mutation(data,suggest)
prob = probability_selection(output,T)
r = rnorm(1,0.5,0.1666667)
if(r <- prob)
{suggest = output[2,]}
else
{ suggest = output[1,]}
T = T-1
schedule = DecodeSeq_Single(suggest)
obj = mean(schedule$Lateness)
optimization_obj = c(optimization_obj,obj)
iterations = c(iterations,gen)
}
plot(iterations,optimization_obj)
suggest
}
SimulatedAnnealing(data,15)
SimulatedAnnealing(data,50)
SimulatedAnnealing(data,450)
SimulatedAnnealing(data,50)
r = rnorm(1,0.5,0.1666667)
rnorm(0100,0.5,0.1666667)
probability_selection <- function(output,T)
{
E = c()
for(i in 1:2)
{
string = output[i,]
shedule=DecodeSeq_Single(string)
a=shedule$Lateness
avg = sum(a)/length(string)
g = 100-avg
E = c(E,g)
}
del_E = E[1]-E[2]
del_E
o = exp(-(del_E/T))
prob = 1/(1+o)
prob
}
fitness<-function(string)
{shedule=DecodeSeq_Single(string)
a=which.max(shedule$Lateness)
b = shedule$Lateness[a]
c=1/b
return(c)}
output
fitness(c(5,1,2,3,4)
)
fitness(c(1,2,3,4,5))
fitness(c(1,2,3,4,5))
probability_selection(output,1)
probability_selection <- function(output,T)
{
E = c()
for(i in 1:2)
{
string = output[i,]
shedule=DecodeSeq_Single(string)
a=shedule$Lateness
avg = sum(a)/length(string)
g = 100-avg
E = c(E,g)
}
del_E = E[1]-E[2]
del_E
o = exp((del_E/T))
prob = 1/(1+o)
prob
}
probability_selection(output,1)
probability_selection(output,100)
SimulatedAnnealing(data,100)
fitness<-function(string)
{shedule=DecodeSeq_Single(string)
a=shedule$Lateness
print(i)
avg = sum(a)/length(string)
g = 100-avg
return(g)}
output
fitness(output[1,])
fitness(c(1,2,3,4,5))
fitness<-function(string)
{shedule=DecodeSeq_Single(string)
a=shedule$Lateness
avg = sum(a)/length(string)
g = 100-avg
return(g)}
fitness(c(1,2,3,4,5))
fitness(c(5,1,2,3,4))
probability_selection <- function(output,T)
{
E = c()
for(i in 1:2)
{
string = output[i,]
shedule=DecodeSeq_Si
avg = mean(schedule$Lateness)
g = 100-avg
E = c(E,g)
}
del_E = E[1]-E[2]
del_E
o = exp((del_E/T))
prob = 1/(1+o)
prob
}
SimulatedAnnealing(data,100)
probability_selection <- function(output,T)
{
E = c()
for(i in 1:2)
{
string = output[i,]
shedule=DecodeSeq_Single(string)
avg = mean(schedule$Lateness)
g = 100-avg
E = c(E,g)
}
del_E = E[1]-E[2]
del_E
o = exp((del_E/T))
prob = 1/(1+o)
prob
}
SimulatedAnnealing(data,100)
probability_selection <- function(output,T)
{
E = c()
for(i in 1:2)
{
string = output[i,]
schedule=DecodeSeq_Single(string)
avg = mean(schedule$Lateness)
g = 100-avg
E = c(E,g)
}
del_E = E[1]-E[2]
del_E
o = exp((del_E/T))
prob = 1/(1+o)
prob
}
SimulatedAnnealing(data,100)
SimulatedAnnealing(data,100)
SimulatedAnnealing(data,100)
SimulatedAnnealing(data,100)
SimulatedAnnealing(data,100)
i
remove(i)
i
SimulatedAnnealing(data,100)
SimulatedAnnealing(data,100)
SimulatedAnnealing(data,100)
SimulatedAnnealing(data,100)
## Simulated Annealing Function using GA package
SimulatedAnnealing <- function(data,T)
{
Jobs = length(data$Job)
suggest = CreateBiasedPopulation(Jobs,1)
schedule2 = DecodeSeq_Single(suggest)
best_obj = mean(schedule$Lateness)
best_seq  = suggest
data = data
optimization_obj = c()
iterations = c()
g = T
for(gen in  1:g)
{
output = mutation(data,suggest)
prob = probability_selection(output,T)
r = rnorm(1,0.5,0.1666667)
if(r <- prob)
{suggest = output[2,]}
else
{ suggest = output[1,]}
T = T-1
schedule = DecodeSeq_Single(suggest)
obj = mean(schedule$Lateness)
if (obj<best_obj)  {best_seq = suggest}
}
best_seq
}
SimulatedAnnealing(data,100)
## Simulated Annealing Function using GA package
SimulatedAnnealing <- function(data,T)
{
Jobs = length(data$Job)
suggest = CreateBiasedPopulation(Jobs,1)
schedule2 = DecodeSeq_Single(suggest)
best_obj = mean(schedule2$Lateness)
best_seq  = suggest
data = data
optimization_obj = c()
iterations = c()
g = T
for(gen in  1:g)
{
output = mutation(data,suggest)
prob = probability_selection(output,T)
r = rnorm(1,0.5,0.1666667)
if(r <- prob)
{suggest = output[2,]}
else
{ suggest = output[1,]}
T = T-1
schedule = DecodeSeq_Single(suggest)
obj = mean(schedule$Lateness)
if (obj<best_obj)  {best_seq = suggest}
}
best_seq
}
SimulatedAnnealing(data,100)
SimulatedAnnealing(data,100)
fitness(c(1,5,3,2,4))
fitness(c(5,1,2,3,4))
DecodeSeq_Single(c(1,5,3,2,4))
s=DecodeSeq_Single(c(1,5,3,2,4))
mean(s$Lateness)
output
probability = c()
Temperature = c()
for(T in 100:1)
{
prob= probability_selection(output,T)
probability=c(probability,prob)
Temperature = c(Temperature,T)
}
plot(Temperature,probability)
